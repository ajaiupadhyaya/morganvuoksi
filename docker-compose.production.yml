version: '3.8'

services:
  # Production Database - PostgreSQL with TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: morganvuoksi-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: morganvuoksi
      POSTGRES_USER: ${DB_USER:-morganvuoksi}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/timescale_setup.sql:/docker-entrypoint-initdb.d/02-timescale.sql
    networks:
      - morganvuoksi-network
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for Caching and Real-time Data
  redis:
    image: redis:7-alpine
    container_name: morganvuoksi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - morganvuoksi-network
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      - net.core.somaxconn=1024

  # Main API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: api
    container_name: morganvuoksi-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-morganvuoksi}:${DB_PASSWORD}@timescaledb:5432/morganvuoksi
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RAY_ADDRESS=ray-head:10001
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - WORKERS=4
      - API_KEYS_ALPHA_VANTAGE=${API_KEY_ALPHA_VANTAGE}
      - API_KEYS_POLYGON=${API_KEY_POLYGON}
      - API_KEYS_IEX=${API_KEY_IEX}
      - IB_HOST=${IB_HOST:-ib-gateway}
      - IB_PORT=${IB_PORT:-7497}
      - IB_CLIENT_ID=${IB_CLIENT_ID:-1}
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - morganvuoksi-network
    depends_on:
      - timescaledb
      - redis
      - ray-head
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: morganvuoksi-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXT_PUBLIC_WS_URL=ws://api:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - morganvuoksi-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ray Cluster Head Node
  ray-head:
    image: rayproject/ray:2.8.0-py310
    container_name: morganvuoksi-ray-head
    restart: unless-stopped
    ports:
      - "8265:8265"  # Ray Dashboard
      - "10001:10001"  # Ray Client
    environment:
      - RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER=1
    volumes:
      - ./src:/app/src
      - ray_data:/tmp/ray
    networks:
      - morganvuoksi-network
    command: >
      ray start --head --port=6379 --redis-password=${REDIS_PASSWORD}
      --dashboard-host=0.0.0.0 --dashboard-port=8265
      --object-manager-port=8076 --node-manager-port=8077
      --ray-client-server-port=10001 --min-worker-port=10002 --max-worker-port=10100
      --block

  # Ray Worker Nodes (for ML workloads)
  ray-worker:
    image: rayproject/ray:2.8.0-py310
    restart: unless-stopped
    environment:
      - RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER=1
    volumes:
      - ./src:/app/src
      - ray_data:/tmp/ray
    networks:
      - morganvuoksi-network
    depends_on:
      - ray-head
    command: >
      ray start --address=ray-head:6379 --redis-password=${REDIS_PASSWORD}
      --object-manager-port=8076 --node-manager-port=8077
      --min-worker-port=10002 --max-worker-port=10100
      --block
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 8G
          cpus: '4.0'

  # NGINX Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: morganvuoksi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - morganvuoksi-network
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: morganvuoksi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - morganvuoksi-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: morganvuoksi-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=timescaledb:5432
      - GF_DATABASE_NAME=morganvuoksi
      - GF_DATABASE_USER=${DB_USER:-morganvuoksi}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - morganvuoksi-network
    depends_on:
      - prometheus
      - timescaledb

  # Elasticsearch for Log Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: morganvuoksi-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - morganvuoksi-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: morganvuoksi-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - morganvuoksi-network
    depends_on:
      - elasticsearch

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: morganvuoksi-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/app/logs:ro
    networks:
      - morganvuoksi-network
    depends_on:
      - elasticsearch

  # Interactive Brokers Gateway (for live trading)
  ib-gateway:
    image: rylorin/ib-gateway:latest
    container_name: morganvuoksi-ib-gateway
    restart: unless-stopped
    environment:
      - TWS_USERID=${TWS_USERID}
      - TWS_PASSWORD=${TWS_PASSWORD}
      - TRADING_MODE=${TRADING_MODE:-paper}
      - READ_ONLY_API=no
      - TWOFA_TIMEOUT_ACTION=restart
    ports:
      - "4002:4002"  # Paper trading
      - "4001:4001"  # Live trading
      - "5900:5900"  # VNC
    volumes:
      - ib_settings:/opt/ibc/settings
    networks:
      - morganvuoksi-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Jupyter Lab for Research and Development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: morganvuoksi-jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-morganvuoksi}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./src:/home/jovyan/src
      - ./data:/home/jovyan/data
      - jupyter_data:/home/jovyan/.jupyter
    networks:
      - morganvuoksi-network
    depends_on:
      - timescaledb
      - redis

  # InfluxDB for Time Series Metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: morganvuoksi-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=MorganVuoksi
      - DOCKER_INFLUXDB_INIT_BUCKET=trading_metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - morganvuoksi-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: morganvuoksi-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    networks:
      - morganvuoksi-network
    depends_on:
      - timescaledb
    command: >
      sh -c "
        while true; do
          sleep 86400
          pg_dump -h timescaledb -U ${DB_USER:-morganvuoksi} -d morganvuoksi > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
        done
      "

  # Health Check Service
  healthcheck:
    image: alpine/curl
    container_name: morganvuoksi-healthcheck
    restart: unless-stopped
    networks:
      - morganvuoksi-network
    depends_on:
      - api
      - frontend
      - timescaledb
      - redis
    command: >
      sh -c "
        while true; do
          curl -f http://api:8000/api/v1/health || exit 1
          curl -f http://frontend:3000 || exit 1
          sleep 60
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  ray_data:
    driver: local
  ib_settings:
    driver: local
  jupyter_data:
    driver: local
  influxdb_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  morganvuoksi-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16